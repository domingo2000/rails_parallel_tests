name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  scan_js:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bin/importmap audit

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        group: [1, 2]
    name: Test Group ${{ matrix.group }}/2
    steps:
      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      
      # Setup test database
      - name: Setup test database
        run: |
          bundle exec rake parallel:setup
      
      # Restore runtime cache
      - name: Restore Runtime Cache
        uses: actions/cache/restore@v4
        id: cache-restore
        with:
          key: runtime-cache-all
          path: tmp/parallel_runtime_test.log
          
      # Run tests
      - name: Run Tests
        run: |
          bundle exec parallel_test -n 2 --group-by runtime --only-group ${{ matrix.group }} --verbose test/
        env:
          RAILS_ENV: test
          RECORD_RUNTIME: "true"

      # Upload coverage data
      - name: Upload Coverage Data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.group }}
          path: coverage
          
      # Clear and store runtime chunk
      - name: Clear Runtime Cache Chunk
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete runtime-cache-${{ matrix.group }} --confirm || true
          mkdir -p tmp/parallel_runtime_test
          mv tmp/parallel_runtime_test.log tmp/parallel_runtime_test/${{ matrix.group }}.log
        continue-on-error: true
        
      - name: Store Runtime Cache Chunk
        uses: actions/cache/save@v4
        with:
          key: runtime-cache-${{ matrix.group }}
          path: tmp/parallel_runtime_test

  store-runtime:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Load Runtime Cache Chunk 1
        uses: actions/cache/restore@v4
        with:
          key: runtime-cache-1
          path: tmp/parallel_runtime_test
          
      - name: Load Runtime Cache Chunk 2
        uses: actions/cache/restore@v4
        with:
          key: runtime-cache-2
          path: tmp/parallel_runtime_test
      
      - name: Combine Runtime Cache Chunks
        run: |
          mkdir -p tmp
          cat tmp/parallel_runtime_test/* > tmp/parallel_runtime_test.log
          cat tmp/parallel_runtime_test.log
          
      - name: Clear Runtime Cache
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete runtime-cache-all --confirm || true
        continue-on-error: true
        
      - name: Store Combined Runtime Cache
        uses: actions/cache/save@v4
        with:
          key: runtime-cache-all
          path: tmp/parallel_runtime_test.log
  
  store-coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          
      # Download coverage artifacts from each test group
      - name: Download Coverage Group 1
        uses: actions/download-artifact@v4
        with:
          name: coverage-1
          path: coverage/resultset-1
          
      - name: Download Coverage Group 2
        uses: actions/download-artifact@v4
        with:
          name: coverage-2
          path: coverage/resultset-2
          
      # Generate combined coverage report
      - name: Generate Combined Coverage Report
        run: bundle exec rake coverage:report
        
      # Upload combined coverage report
      - name: Upload Combined Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
